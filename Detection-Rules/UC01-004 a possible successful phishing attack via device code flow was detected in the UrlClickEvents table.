// Title: UC01-004 a possible successful phishing attack via device code flow was detected in the UrlClickEvents table.  
// ID: $add here the Sentinel Rule ID
// Description: This detection rule detects potential abuse of device code authentication flow following access to a logon page. This rule identifies scenarios where a user accesses a suspicious logon page (e.g., "login.microsoftonline.com"), followed by a successful sign-in using the device code flow within a short timeframe. Such behavior may indicate an attacker leveraging the device code authentication mechanism to gain unauthorized access." It is known that bad actors are using these tools to get access and perform malicious activities. 'Normal' users are unlikely to use these tooling compared to IT administrators. For these persons a watchlist can be used in order to exclude their activities from certain IP addresses. 
// Severity: High
// Tactics: Initial Access
// Techniques: T1078 - Valid Accounts, T1566 - Phishing
// Creation date: 24 December 2024
// Created by: @82BBB00 - https://github.com/82BBB00
// Last modified date: 24 December 2024
// Last modified by: @82BBB00 - https://github.com/82BBB00
// QueryFrequency: PT5M
// QueryPeriod: PT10M
// The actual KQL query will start below

// Retrieving a watchlist to prevent known false positives
let Trustedlist = 
    _GetWatchlist('$add here the name of the watchlist')
| project UserPrincipalName, IPAddress, AppDisplayName;  

// Filter and summarize latest network events where the RemoteURL is the one used to logon. Alternatively UrlClickEvents table could be used.
let LatestNetworkEvents = 
    UrlClickEvents
| where UrlChain has "devicelogin" or UrlChain has "deviceauth"
| summarize arg_max(TimeGenerated, *) by AccountUpn
| project NetworkTimeGenerated = TimeGenerated, AccountUpn, Url, UrlChain, NetworkMessageId;
    

// Filter succesful sign-in events using device code flow and exclude known combinations
let SignInEvents = 
    SigninLogs
    | where AuthenticationProtocol == "deviceCode"
    | join kind=leftanti (
        Trustedlist
    ) on UserPrincipalName, IPAddress, AppDisplayName
    | project SignInTimeGenerated = TimeGenerated, UserPrincipalName, AppDisplayName, IPAddress, DeviceDetail;

// Join and filter for matching events
LatestNetworkEvents
| join kind=innerunique (
    SignInEvents
) on $left.AccountUpn == $right.UserPrincipalName
| project AccountUpn, NetworkTimeGenerated, SignInTimeGenerated, AppDisplayName, IPAddress, DeviceDetail
